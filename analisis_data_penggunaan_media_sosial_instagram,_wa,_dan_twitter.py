# -*- coding: utf-8 -*-
"""Analisis Data Penggunaan Media Sosial Instagram, WA, dan Twitter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y42LJp3Aux2rRXlsXowDmK96H6ukjZD7
"""

from openpyxl import load_workbook
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
import matplotlib.pyplot as plt

df = pd.read_csv ('Survei_Medsos.csv')
df

file_path = 'Survei_Medsos.csv'

data_medsos = pd.read_csv(file_path)

print(data_medsos.head())

df.isna().sum()

data_medsos. isna().sum()

def_Kesulitan_Melepaskan_Diri = "Ya"
data_medsos.Kesulitan_Melepaskan_Diri .fillna(def_Kesulitan_Melepaskan_Diri , inplace =True)

data_medsos. isna().sum()

data_medsos.loc[:,['Jenis_Kelamin','Pekerjaan','Sering','Lupa_Waktu','Waktu_Sekali_Pakai','Waktu_Harian','Mengganggu_Produktivitas','Membuang_Waktu','Tidak_Bisa_Kontrol_Diri','Tidak_Sadar_Waktu','Fomo','Tanpa_Tujuan','Terpikirkan','Usaha_Melepaskan_Diri','Kesulitan_Melepaskan_Diri','Butuh_Aplikasi','Pernah_Memakai_Aplikasi_Pengaturan_Waktu',]]

for index, row in data_medsos.iterrows():
  if row['Mengganggu_Produktivitas'] >4:
    data_medsos.loc[index, 'Keterangan'] = 'Maksimum'
  elif row['Mengganggu_Produktivitas'] >=2:
    data_medsos.loc[index, 'Keterangan'] = 'Rata-Rata'
  else :
    data_medsos.loc[index, 'Keterangan'] = 'Minimum'

data_medsos[['Jenis_Kelamin','Pekerjaan','Sering','Lupa_Waktu','Waktu_Sekali_Pakai','Waktu_Harian','Mengganggu_Produktivitas','Membuang_Waktu','Tidak_Bisa_Kontrol_Diri','Tidak_Sadar_Waktu','Fomo','Tanpa_Tujuan','Terpikirkan','Usaha_Melepaskan_Diri','Kesulitan_Melepaskan_Diri','Butuh_Aplikasi','Pernah_Memakai_Aplikasi_Pengaturan_Waktu']]

tabel = data_medsos['Waktu_Harian'].astype(str).tolist()

print(tabel[:5])

CV = CountVectorizer(stop_words=None)

term_fit = CV.fit(tabel)

print(len(term_fit.vocabulary_))

print (term_fit.vocabulary_)

term_frekuency = term_fit.transform(data_medsos)
print (data_medsos)

term = term_fit.transform(tabel)
tfidf_transform = TfidfTransformer().fit(term)
tfidf = tfidf_transform.transform(term_frekuency)
print (tfidf)

# Inisialisasi KMeans
kmeans = KMeans(n_clusters=3)

# Melakukan clustering pada data yang telah di-transformasi dengan TF-IDF
kmeans.fit(tfidf)

# Mendapatkan pusat cluster dan label dari setiap data
centroids = kmeans.cluster_centers_
labels = kmeans.labels_

# Melakukan reduksi dimensi menggunakan PCA
pca = PCA(n_components=2)
tfidf_2d = pca.fit_transform(tfidf.toarray())

# Visualisasi menggunakan matplotlib
plt.figure(figsize=(15,10))
colors = ['b', 'g', 'r']

for i in range(len(tfidf_2d)):
    plt.plot(tfidf_2d[i][0], tfidf_2d[i][1], colors[labels[i]] + 'o', markersize=10)

for i in range(len(centroids)):
    centroid_2d = pca.transform([centroids[i]])
    plt.plot(centroid_2d[0][0], centroid_2d[0][1], 'kx', markersize=15, markeredgewidth=3)

plt.title('Cluster Visualization')
plt.xlabel('PCA Feature 1')
plt.ylabel('PCA Feature 2')
plt.show()

y = data_medsos['Membuang_Waktu'].apply(float).values
print("Values from 'Membuang_Waktu':\n", y)

mengganggu_produktivitas = data_medsos['Mengganggu_Produktivitas'].apply(float).values
print("Values from 'Mengganggu_Produktivitas':\n", mengganggu_produktivitas)



features = data_medsos[['Membuang_Waktu', 'Mengganggu_Produktivitas']].apply(pd.to_numeric, errors='coerce')

# Mengatasi missing values jika ada
features = features.dropna().values

# Standardisasi fitur
scaler = StandardScaler().fit(features)
X = scaler.transform(features)
print("Standardized features:\n", X)



# Membuat dan menyesuaikan model SVR
SVR_model = SVR(kernel='linear', C=100, gamma=0.001).fit(X, y)
print(SVR_model)

# Mengambil sampel data untuk pengujian
d_test = data_medsos.sample(n=16)
print(d_test)

y_true = d_test['Mengganggu_Produktivitas'].values
y_true

columns = ['Mengganggu_Produktivitas']
features_test = d_test[list(columns)].values
features_test

# Standardisasi fitur tes
scaler_test = StandardScaler().fit(features_test)
testdata = scaler_test.transform(features_test)
print("Standardized test features:\n", testdata)

# Mengatur ulang indeks DataFrame
tbl = data_medsos.reset_index(drop=True)
print(tbl)

x = tbl[['Membuang_Waktu', 'Mengganggu_Produktivitas']].values
print(x)